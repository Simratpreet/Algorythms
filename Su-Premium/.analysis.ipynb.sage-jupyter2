{"exec_count":1,"start":1526742129682,"input":"import pandas as pd\nimport numpy as np\n\ntrain_df = pd.read_csv(\"train_data.csv\")\n\ntest_df = pd.read_csv(\"test_data.csv\")","state":"done","pos":0,"type":"cell","end":1526742134306,"id":"1d1be0","kernel":"python2-ubuntu"}
{"exec_count":11,"input":"# Try Linear Regression, RandomForest, MLPRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPRegressor\n\n#clf = LinearRegression()\n#clf = RandomForestClassifier()\nclf = MLPRegressor()\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict(X_test)","state":"done","pos":2,"type":"cell","id":"e32512","kernel":"python2-ubuntu"}
{"exec_count":13,"start":1526742438245,"input":"# Predictions on test data\npredictions = clf.predict(test_data)\n\n# Dump to CSV\npred = np.asarray(predictions)\nnp.savetxt(\"Submission - Premium Prediction.csv\", pred, delimiter=\",\", header=\"Premium\")","state":"done","pos":4,"type":"cell","end":1526742441393,"id":"441016","kernel":"python2-ubuntu"}
{"exec_count":2,"start":1526742134328,"input":"# Remove Negative Premiums from training data\ntrain_df = train_df[train_df['Premium'] >= 0]\n\n# Separate train output\ntrain_premium = train_df['Premium']\ntrain_data = train_df.drop(['Premium', 'ID'], axis=1)\n\n# Separate train output\ntest_premium = test_df['Premium']\ntest_data = test_df.drop(['Premium', 'ID'], axis=1)","state":"done","pos":0.25,"type":"cell","end":1526742134628,"id":"361e7e","kernel":"python2-ubuntu"}
{"exec_count":3,"start":1526742134630,"input":"# (test_data['Var_1'] >= 0).value_counts()","state":"done","pos":0.5,"type":"cell","end":1526742134642,"id":"304b9b","kernel":"python2-ubuntu"}
{"exec_count":4,"start":1526742134647,"input":"# min_max_scaled = ['Var_1', 'Var_10']\n# categorized_columns = ['Var_11']","state":"done","pos":1,"type":"cell","end":1526742134654,"id":"49f13f","kernel":"python2-ubuntu"}
{"exec_count":5,"start":1526742134663,"input":"# Replace NA1 in Var_37 with 0\ntrain_data['Var_37'] = train_data['Var_37'].apply(lambda x: int(0) if x == \"NA1\" else int(x))\ntest_data['Var_37'] = test_data['Var_37'].apply(lambda x: int(0) if x == \"NA1\" else int(x))\n\n# Do One-Hot Encoding on categorical columns\ntrain_data = pd.get_dummies(train_data)\ntest_data = pd.get_dummies(test_data)\n","scrolled":true,"state":"done","pos":1.75,"type":"cell","end":1526742135942,"id":"0d445c","kernel":"python2-ubuntu"}
{"exec_count":6,"start":1526742136133,"input":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(train_data, train_premium, test_size=0.33, random_state=0)","state":"done","pos":1.9375,"type":"cell","end":1526742138112,"id":"0fa7a6","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"array([[-0.01581323, -0.10021724, -0.07791049, ..., -0.49217462,\n         3.27010417, -0.38200435],\n       [-0.01581323, -0.10021724, -0.07791049, ..., -0.49217462,\n        -0.30580066, -0.38200435],\n       [ 0.01590136, -0.10021724, -0.02667801, ..., -0.49217462,\n        -0.30580066, -0.38200435],\n       ...,\n       [-0.01581323, -0.10021724, -0.09071861, ..., -0.49217462,\n        -0.30580066, -0.38200435],\n       [-0.01581323, -0.10021724, -0.07791049, ..., -0.49217462,\n        -0.30580066, -0.38200435],\n       [ 0.02949333, -0.10021724, -0.01386988, ..., -0.49217462,\n        -0.30580066, -0.38200435]])"},"exec_count":7}},"exec_count":7,"start":1526742138133,"input":"# from sklearn import utils\n# from sklearn import preprocessing\n\n# lab_enc = preprocessing.LabelEncoder()\n# y_train = lab_enc.fit_transform(y_train)\n\n# utils.multiclass.type_of_target(y_train)\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nscaler.fit(X_train)\nscaler.transform(X_train)\nscaler.transform(X_test)","state":"done","pos":1.96875,"type":"cell","end":1526742139279,"id":"1931d2","kernel":"python2-ubuntu"}
{"output":{"0":{"text":"2214877.514776292\n","name":"stdout"}},"exec_count":12,"start":1526742414338,"input":"from sklearn.metrics import mean_squared_error\n\nprint(mean_squared_error(y_test, y_pred))","state":"done","pos":3,"type":"cell","end":1526742414358,"id":"862049","kernel":"python2-ubuntu"}
{"type":"cell","id":"5f9814","pos":3.5,"input":"**MLPRegressor has given the best RMSE**","cell_type":"markdown"}
{"type":"file","last_load":1526544358199}
{"type":"settings","backend_state":"running","trust":true,"kernel":"python2-ubuntu","kernel_usage":{"cpu":0,"memory":5410816},"kernel_state":"idle"}