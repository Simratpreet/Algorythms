{"exec_count":100,"start":1526754995832,"input":"test_data = test_data.reshape((test_data.shape[0], test_data.shape[2]))\ninv_pred = concatenate((predictions, test_data[:, 1:]), axis=1)","state":"done","pos":4.96875,"type":"cell","end":1526754995841,"id":"827637","kernel":"python2-ubuntu"}
{"exec_count":101,"start":1526754998906,"input":"inv_pred = scaler.inverse_transform(inv_pred)","state":"done","pos":5.96875,"type":"cell","end":1526754998909,"id":"26d12e","kernel":"python2-ubuntu"}
{"exec_count":102,"start":1526755005628,"input":"inv_pred_mod = inv_pred[:, 0]","state":"done","pos":6.46875,"type":"cell","end":1526755005633,"id":"a54798","kernel":"python2-ubuntu"}
{"exec_count":106,"start":1526755139833,"input":"np.savetxt(\"output.csv\", np.asarray(inv_pred_mod), delimiter=\",\")","state":"done","pos":6.84375,"type":"cell","end":1526755139862,"id":"f86065","kernel":"python2-ubuntu"}
{"exec_count":43,"start":1526752484437,"input":"# Load dataset using pandas\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"TrainTestData_Promotional Sales.csv\")\ndf = df.drop(['Account'], axis=1)","state":"done","pos":0,"cell_type":"code","type":"cell","end":1526752484472,"id":"88b1f1","kernel":"python2-ubuntu"}
{"exec_count":44,"start":1526752486091,"input":"# Split Test Data and Train Data\n\ntest_df = df[df['Trx'] == '????']\ntrain_df = df[df['Trx'] != '????']","state":"done","pos":1,"cell_type":"code","type":"cell","end":1526752486104,"id":"c9b9da","kernel":"python2-ubuntu"}
{"exec_count":62,"start":1526754190675,"input":"test_df['Trx'] = test_df['Trx'].apply(lambda x: 0 if x == '????' else x)\ntest_df['Trx'] = test_df['Trx'].astype(int)","state":"done","pos":3.84375,"type":"cell","end":1526754190684,"id":"dd2c92","kernel":"python2-ubuntu"}
{"exec_count":94,"start":1526754941631,"input":"def chunks(l, n):\n    for i in range(0, len(l), n):\n        # Create an index range for l of n items:\n        yield l[i:i+n]\n    \npred_array = list(chunks(inv_pred_mod, 6))","state":"done","pos":6.96875,"type":"cell","end":1526754941641,"id":"29fe1d","kernel":"python2-ubuntu"}
{"exec_count":98,"start":1526754989543,"input":"test_data = reframed.values\ntest_data = test_data[:, :-1]\ntest_data = test_data.reshape(test_data.shape[0], 1, test_data.shape[1])","state":"done","pos":4.21875,"type":"cell","end":1526754989554,"id":"8b3dd8","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"image/png":"dfc641f9c5c64a6d9d1c154952663e3c90928b35"}}},"exec_count":14,"start":1526750157938,"input":"from matplotlib import pyplot\n# load dataset\nvalues = train_df.values\n# specify columns to plot\ngroups = [0, 1, 2, 3, 4, 5, 6]\ni = 1\n# plot each column\npyplot.figure()\nfor group in groups:\n\tpyplot.subplot(len(groups), 1, i)\n\tpyplot.plot(values[:, group])\n\tpyplot.title(train_df.columns[group], y=0.5, loc='right')\n\ti += 1\npyplot.show()","state":"done","pos":2.75,"type":"cell","end":1526750188682,"id":"25d1a0","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Trx</th>\n      <th># Speaker Programs</th>\n      <th># Calls</th>\n      <th># PDE</th>\n      <th># Emails</th>\n      <th># Clicks</th>\n      <th># Samples</th>\n    </tr>\n    <tr>\n      <th>Month</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2991</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9</td>\n      <td>29</td>\n      <td>13</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10000</td>\n      <td>5</td>\n      <td>8</td>\n      <td>11</td>\n      <td>39</td>\n      <td>25</td>\n      <td>81</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7896</td>\n      <td>3</td>\n      <td>21</td>\n      <td>12</td>\n      <td>40</td>\n      <td>28</td>\n      <td>212</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6987</td>\n      <td>7</td>\n      <td>16</td>\n      <td>12</td>\n      <td>42</td>\n      <td>31</td>\n      <td>193</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3502</td>\n      <td>6</td>\n      <td>1</td>\n      <td>10</td>\n      <td>34</td>\n      <td>18</td>\n      <td>22</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":45}},"exec_count":45,"start":1526752490542,"input":"# train_df.columns = ['Trx', '# Speaker Programs', '# Calls', '# PDE', '# Emails', '# Clicks', '# Samples']\n# train_df.index.name = 'Month'\ntrain_df = train_df.set_index('Month')\ntest_df = test_df.set_index('Month')\n\ntrain_df.head(5)\n#train_df.values","state":"done","pos":2.5,"type":"cell","end":1526752490754,"id":"7c868d","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"(3999, 1, 7)"},"exec_count":39}},"exec_count":39,"start":1526752238687,"input":"test_X.shape","state":"done","pos":2.953125,"type":"cell","end":1526752238708,"id":"d26469","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"Index([u'Month', u'Trx', u'# Speaker Programs', u'# Calls', u'# PDE',\n       u'# Emails', u'# Clicks', u'# Samples'],\n      dtype='object')"},"exec_count":3}},"exec_count":3,"start":1526749712930,"input":"train_df.columns","state":"done","pos":2.25,"type":"cell","end":1526749712944,"id":"1eb382","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"Index([u'Trx', u'# Speaker Programs', u'# Calls', u'# PDE', u'# Emails',\n       u'# Clicks', u'# Samples'],\n      dtype='object')"},"exec_count":50}},"exec_count":50,"start":1526753436833,"input":"test_df.columns","state":"done","pos":3.71875,"type":"cell","end":1526753436858,"id":"a55ad0","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"array([ 858.61456, 5891.789  , 5454.4756 , ...,  656.6888 ,  656.6888 ,\n        656.6888 ], dtype=float32)"},"exec_count":48}},"exec_count":48,"start":1526752579763,"input":"inv_yhat","state":"done","pos":3.46875,"type":"cell","end":1526752579790,"id":"3a6aba","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"array([0.02358476, 0.02450312, 0.02833598, ..., 0.04899547, 0.04072064,\n       0.05848945], dtype=float32)"},"exec_count":103}},"exec_count":103,"start":1526755018511,"input":"inv_pred_mod","state":"done","pos":6.71875,"type":"cell","end":1526755018554,"id":"6d79a8","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"array([[0.02358476],\n       [0.02450312],\n       [0.02833598],\n       ...,\n       [0.04899547],\n       [0.04072064],\n       [0.05848945]], dtype=float32)"},"exec_count":99}},"exec_count":99,"start":1526754991434,"input":"predictions = model.predict(test_data)\npredictions\n# test_data = test_data.reshape((test_data.shape[0], test_data.shape[2]))\n# # invert scaling for forecast\n# inv_pred = concatenate((yhat, test_data[:, 1:]), axis=1)\n# inv_pred = scaler.inverse_transform(inv_pred)\n# # inv_yhat = inv_pred[:,0]\n# inv_pred","state":"done","pos":4.46875,"type":"cell","end":1526754991874,"id":"354694","kernel":"python2-ubuntu"}
{"output":{"0":{"data":{"text/plain":"array([[2.3584761e-02, 5.0000000e+00, 1.0000000e+00, ..., 3.3000000e+01,\n        1.7000000e+01, 2.0000000e+01],\n       [2.4503116e-02, 5.0000000e+00, 8.0000000e+00, ..., 3.9000000e+01,\n        2.5000000e+01, 8.1000000e+01],\n       [2.8335981e-02, 7.0000005e+00, 8.0000000e+00, ..., 4.0000000e+01,\n        2.7000000e+01, 8.9000000e+01],\n       ...,\n       [4.8995472e-02, 0.0000000e+00, 2.5000000e+01, ..., 2.3000000e+01,\n        9.0000000e+00, 4.7000000e+01],\n       [4.0720638e-02, 0.0000000e+00, 1.8000000e+01, ..., 2.3000000e+01,\n        9.0000000e+00, 3.4000004e+01],\n       [5.8489449e-02, 3.0000000e+00, 3.0000002e+01, ..., 4.2000000e+01,\n        3.2000000e+01, 3.7900000e+02]], dtype=float32)"},"exec_count":104}},"exec_count":104,"start":1526755037635,"input":"inv_pred","state":"done","pos":6.21875,"type":"cell","end":1526755037665,"id":"ea965b","kernel":"python2-ubuntu"}
{"output":{"0":{"ename":"TypeError","evalue":"Mismatch between array dtype ('object') and format specifier ('%.18e')","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mTypeError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-96-f23be01ac2b1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavetxt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"output.csv\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpred_array\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdelimiter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\",\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'A,B,C,D,E,F'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python2.7/dist-packages/numpy/lib/npyio.pyc\u001b[0m in \u001b[0;36msavetxt\u001b[0;34m(fname, X, fmt, delimiter, newline, header, footer, comments, encoding)\u001b[0m\n\u001b[1;32m   1378\u001b[0m                     raise TypeError(\"Mismatch between array dtype ('%s') and \"\n\u001b[1;32m   1379\u001b[0m                                     \u001b[0;34m\"format specifier ('%s')\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1380\u001b[0;31m                                     % (str(X.dtype), format))\n\u001b[0m\u001b[1;32m   1381\u001b[0m                 \u001b[0mfh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1382\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Mismatch between array dtype ('object') and format specifier ('%.18e')"]}},"exec_count":96,"start":1526754976030,"input":"np.savetxt(\"output.csv\", np.asarray(pred_array), delimiter=\",\", header='A,B,C,D,E,F')","scrolled":true,"state":"done","pos":7.96875,"type":"cell","end":1526754976087,"id":"4873af","kernel":"python2-ubuntu"}
{"output":{"0":{"text":"   var1(t-1)  var2(t-1)  var3(t-1)  var4(t-1)  var5(t-1)  var6(t-1)  \\\n1        0.0   0.416667   0.000000   0.142857   0.434783   0.264706   \n2        0.0   0.416667   0.125000   0.285714   0.695652   0.500000   \n3        0.0   0.583333   0.125000   0.285714   0.739130   0.558824   \n4        0.0   0.416667   0.196429   0.428571   0.739130   0.588235   \n5        0.0   0.250000   0.000000   0.142857   0.391304   0.235294   \n\n   var7(t-1)  var1(t)  \n1   0.011676      0.0  \n2   0.062552      0.0  \n3   0.069224      0.0  \n4   0.105088      0.0  \n5   0.010842      0.0  \n","name":"stdout"}},"exec_count":97,"start":1526754984448,"input":"from sklearn.preprocessing import MinMaxScaler\nfrom pandas import DataFrame\nfrom pandas import concat\n\ndef series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n    n_vars = 1 if type(data) is list else data.shape[1]\n    df = DataFrame(data)\n    cols, names = list(), list()\n    # input sequence (t-n, ... t-1)\n    for i in range(n_in, 0, -1):\n        cols.append(df.shift(i))\n        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n    # forecast sequence (t, t+1, ... t+n)\n    for i in range(0, n_out):\n        cols.append(df.shift(-i))\n        if i == 0:\n            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n        else:\n            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n    # put it all together\n    agg = concat(cols, axis=1)\n    agg.columns = names\n    # drop rows with NaN values\n    if dropnan:\n        agg.dropna(inplace=True)\n    return agg\n \n# load dataset\ndataset = test_df\nvalues = dataset.values\n\n# ensure all data is float\nvalues = values.astype('float32')\n\n# normalize features\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled = scaler.fit_transform(values)\n\n# frame as supervised learning\nreframed = series_to_supervised(scaled, 1, 1)\n\n# drop columns we don't want to predict\nreframed.drop(reframed.columns[[8,9,10,11,12,13]], axis=1, inplace=True)\nprint(reframed.head())","state":"done","pos":3.96875,"type":"cell","end":1526754984533,"id":"17bbf9","kernel":"python2-ubuntu"}
{"output":{"0":{"text":"   var1(t-1)  var2(t-1)  var3(t-1)  var4(t-1)  var5(t-1)  var6(t-1)  \\\n1   0.294940   0.066667   0.000000      0.000   0.250000   0.138889   \n2   1.000000   0.333333   0.111111      0.250   0.666667   0.472222   \n3   0.788351   0.200000   0.317460      0.375   0.708333   0.555556   \n4   0.696912   0.466667   0.238095      0.375   0.791667   0.638889   \n5   0.346343   0.400000   0.000000      0.125   0.458333   0.277778   \n\n   var7(t-1)   var1(t)  \n1   0.004084  1.000000  \n2   0.051055  0.788351  \n3   0.140231  0.696912  \n4   0.127297  0.346343  \n5   0.010892  0.325018  \n","name":"stdout"}},"exec_count":22,"input":"from sklearn.preprocessing import MinMaxScaler\nfrom pandas import DataFrame\nfrom pandas import concat\n\ndef series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n    n_vars = 1 if type(data) is list else data.shape[1]\n    df = DataFrame(data)\n    cols, names = list(), list()\n    # input sequence (t-n, ... t-1)\n    for i in range(n_in, 0, -1):\n        cols.append(df.shift(i))\n        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n    # forecast sequence (t, t+1, ... t+n)\n    for i in range(0, n_out):\n        cols.append(df.shift(-i))\n        if i == 0:\n            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n        else:\n            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n    # put it all together\n    agg = concat(cols, axis=1)\n    agg.columns = names\n    # drop rows with NaN values\n    if dropnan:\n        agg.dropna(inplace=True)\n    return agg\n \n# load dataset\ndataset = train_df\nvalues = dataset.values\n\n# ensure all data is float\nvalues = values.astype('float32')\n\n# normalize features\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled = scaler.fit_transform(values)\n\n# frame as supervised learning\nreframed = series_to_supervised(scaled, 1, 1)\n\n# drop columns we don't want to predict\nreframed.drop(reframed.columns[[8,9,10,11,12,13]], axis=1, inplace=True)\nprint(reframed.head())","state":"done","pos":2.875,"type":"cell","id":"0045af","kernel":"python2-ubuntu"}
{"output":{"0":{"text":"((8000, 1, 7), (8000,), (3999, 1, 7), (3999,))\n","name":"stdout"}},"exec_count":37,"start":1526752172246,"input":"values = reframed.values\nn_train_months = 8000\ntrain = values[:n_train_months, :]\ntest = values[n_train_months:, :]\n# split into input and outputs\ntrain_X, train_y = train[:, :-1], train[:, -1]\ntest_X, test_y = test[:, :-1], test[:, -1]\n# reshape input to be 3D [samples, timesteps, features]\ntrain_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))\ntest_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))\nprint(train_X.shape, train_y.shape, test_X.shape, test_y.shape)","state":"done","pos":2.90625,"type":"cell","end":1526752172289,"id":"d016f3","kernel":"python2-ubuntu"}
{"output":{"0":{"text":"Test RMSE: 2484.846\n","name":"stdout"}},"exec_count":40,"start":1526752243018,"input":"from numpy import concatenate\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n\nyhat = model.predict(test_X)\ntest_X = test_X.reshape((test_X.shape[0], test_X.shape[2]))\n# invert scaling for forecast\ninv_yhat = concatenate((yhat, test_X[:, 1:]), axis=1)\ninv_yhat = scaler.inverse_transform(inv_yhat)\ninv_yhat = inv_yhat[:,0]\n# invert scaling for actual\ntest_y = test_y.reshape((len(test_y), 1))\ninv_y = concatenate((test_y, test_X[:, 1:]), axis=1)\ninv_y = scaler.inverse_transform(inv_y)\ninv_y = inv_y[:,0]\n# calculate RMSE\nrmse = sqrt(mean_squared_error(inv_y, inv_yhat))\nprint('Test RMSE: %.3f' % rmse)","state":"done","pos":2.96875,"type":"cell","end":1526752243571,"id":"8e75f5","kernel":"python2-ubuntu"}
{"output":{"0":{"text":"Train on 8000 samples, validate on 3999 samples\nEpoch 1/50\n","name":"stdout"},"1":{"text":" - 2s - loss: 0.1643 - val_loss: 0.1638\n","name":"stdout"},"2":{"text":"Epoch 2/50\n","name":"stdout"},"3":{"text":" - 1s - loss: 0.1448 - val_loss: 0.1548\n","name":"stdout"},"4":{"text":"Epoch 3/50\n","name":"stdout"},"5":{"text":" - 1s - loss: 0.1372 - val_loss: 0.1519\n","name":"stdout"},"6":{"text":"Epoch 4/50\n","name":"stdout"},"7":{"text":" - 1s - loss: 0.1351 - val_loss: 0.1513\n","name":"stdout"},"8":{"text":"Epoch 5/50\n","name":"stdout"},"9":{"text":" - 1s - loss: 0.1345 - val_loss: 0.1518\n","name":"stdout"},"10":{"text":"Epoch 6/50\n","name":"stdout"},"11":{"text":" - 1s - loss: 0.1347 - val_loss: 0.1521\n","name":"stdout"},"12":{"text":"Epoch 7/50\n","name":"stdout"},"13":{"text":" - 1s - loss: 0.1347 - val_loss: 0.1521\n","name":"stdout"},"14":{"text":"Epoch 8/50\n","name":"stdout"},"15":{"text":" - 1s - loss: 0.1347 - val_loss: 0.1521\n","name":"stdout"},"16":{"text":"Epoch 9/50\n","name":"stdout"},"17":{"text":" - 1s - loss: 0.1346 - val_loss: 0.1515\n","name":"stdout"},"18":{"text":"Epoch 10/50\n","name":"stdout"},"19":{"text":" - 1s - loss: 0.1344 - val_loss: 0.1520\n","name":"stdout"},"20":{"text":"Epoch 11/50\n","name":"stdout"},"21":{"text":" - 1s - loss: 0.1345 - val_loss: 0.1509\n","name":"stdout"},"22":{"text":"Epoch 12/50\n","name":"stdout"},"23":{"text":" - 1s - loss: 0.1343 - val_loss: 0.1510\n","name":"stdout"},"24":{"text":"Epoch 13/50\n","name":"stdout"},"25":{"text":" - 1s - loss: 0.1342 - val_loss: 0.1513\n","name":"stdout"},"26":{"text":"Epoch 14/50\n","name":"stdout"},"27":{"text":" - 1s - loss: 0.1343 - val_loss: 0.1516\n","name":"stdout"},"28":{"text":"Epoch 15/50\n","name":"stdout"},"29":{"text":" - 1s - loss: 0.1343 - val_loss: 0.1511\n","name":"stdout"},"30":{"text":"Epoch 16/50\n","name":"stdout"},"31":{"text":" - 1s - loss: 0.1340 - val_loss: 0.1516\n","name":"stdout"},"32":{"text":"Epoch 17/50\n","name":"stdout"},"33":{"text":" - 1s - loss: 0.1342 - val_loss: 0.1512\n","name":"stdout"},"34":{"text":"Epoch 18/50\n","name":"stdout"},"35":{"text":" - 1s - loss: 0.1341 - val_loss: 0.1513\n","name":"stdout"},"36":{"text":"Epoch 19/50\n","name":"stdout"},"37":{"text":" - 1s - loss: 0.1341 - val_loss: 0.1513\n","name":"stdout"},"38":{"text":"Epoch 20/50\n","name":"stdout"},"39":{"text":" - 1s - loss: 0.1340 - val_loss: 0.1513\n","name":"stdout"},"40":{"text":"Epoch 21/50\n","name":"stdout"},"41":{"text":" - 1s - loss: 0.1340 - val_loss: 0.1508\n","name":"stdout"},"42":{"text":"Epoch 22/50\n","name":"stdout"},"43":{"text":" - 1s - loss: 0.1339 - val_loss: 0.1509\n","name":"stdout"},"44":{"text":"Epoch 23/50\n","name":"stdout"},"45":{"text":" - 1s - loss: 0.1338 - val_loss: 0.1510\n","name":"stdout"},"46":{"text":"Epoch 24/50\n","name":"stdout"},"47":{"text":" - 1s - loss: 0.1339 - val_loss: 0.1514\n","name":"stdout"},"48":{"text":"Epoch 25/50\n","name":"stdout"},"49":{"text":" - 1s - loss: 0.1339 - val_loss: 0.1507\n","name":"stdout"},"50":{"text":"Epoch 26/50\n","name":"stdout"},"51":{"text":" - 1s - loss: 0.1337 - val_loss: 0.1509\n","name":"stdout"},"52":{"text":"Epoch 27/50\n","name":"stdout"},"53":{"text":" - 1s - loss: 0.1338 - val_loss: 0.1507\n","name":"stdout"},"54":{"text":"Epoch 28/50\n","name":"stdout"},"55":{"text":" - 1s - loss: 0.1337 - val_loss: 0.1509\n","name":"stdout"},"56":{"text":"Epoch 29/50\n","name":"stdout"},"57":{"text":" - 1s - loss: 0.1338 - val_loss: 0.1506\n","name":"stdout"},"58":{"text":"Epoch 30/50\n","name":"stdout"},"59":{"text":" - 1s - loss: 0.1336 - val_loss: 0.1505\n","name":"stdout"},"60":{"text":"Epoch 31/50\n","name":"stdout"},"61":{"text":" - 1s - loss: 0.1336 - val_loss: 0.1504\n","name":"stdout"},"62":{"text":"Epoch 32/50\n","name":"stdout"},"63":{"text":" - 1s - loss: 0.1336 - val_loss: 0.1504\n","name":"stdout"},"64":{"text":"Epoch 33/50\n","name":"stdout"},"65":{"text":" - 1s - loss: 0.1336 - val_loss: 0.1513\n","name":"stdout"},"66":{"text":"Epoch 34/50\n","name":"stdout"},"67":{"text":" - 1s - loss: 0.1337 - val_loss: 0.1506\n","name":"stdout"},"68":{"text":"Epoch 35/50\n","name":"stdout"},"69":{"text":" - 1s - loss: 0.1336 - val_loss: 0.1503\n","name":"stdout"},"70":{"text":"Epoch 36/50\n","name":"stdout"},"71":{"text":" - 1s - loss: 0.1335 - val_loss: 0.1501\n","name":"stdout"},"72":{"text":"Epoch 37/50\n","name":"stdout"},"73":{"text":" - 1s - loss: 0.1334 - val_loss: 0.1505\n","name":"stdout"},"74":{"text":"Epoch 38/50\n","name":"stdout"},"75":{"text":" - 1s - loss: 0.1334 - val_loss: 0.1502\n","name":"stdout"},"76":{"text":"Epoch 39/50\n","name":"stdout"},"77":{"text":" - 1s - loss: 0.1334 - val_loss: 0.1504\n","name":"stdout"},"78":{"text":"Epoch 40/50\n","name":"stdout"},"79":{"text":" - 1s - loss: 0.1334 - val_loss: 0.1502\n","name":"stdout"},"80":{"text":"Epoch 41/50\n","name":"stdout"},"81":{"text":" - 1s - loss: 0.1334 - val_loss: 0.1500\n","name":"stdout"},"82":{"text":"Epoch 42/50\n","name":"stdout"},"83":{"text":" - 1s - loss: 0.1333 - val_loss: 0.1508\n","name":"stdout"},"84":{"text":"Epoch 43/50\n","name":"stdout"},"85":{"text":" - 1s - loss: 0.1334 - val_loss: 0.1505\n","name":"stdout"},"86":{"text":"Epoch 44/50\n","name":"stdout"},"87":{"text":" - 1s - loss: 0.1334 - val_loss: 0.1498\n","name":"stdout"},"88":{"text":"Epoch 45/50\n","name":"stdout"},"89":{"text":" - 1s - loss: 0.1332 - val_loss: 0.1502\n","name":"stdout"},"90":{"text":"Epoch 46/50\n","name":"stdout"},"91":{"text":" - 1s - loss: 0.1333 - val_loss: 0.1506\n","name":"stdout"},"92":{"text":"Epoch 47/50\n","name":"stdout"},"93":{"text":" - 1s - loss: 0.1334 - val_loss: 0.1505\n","name":"stdout"},"94":{"text":"Epoch 48/50\n","name":"stdout"},"95":{"text":" - 1s - loss: 0.1334 - val_loss: 0.1505\n","name":"stdout"},"96":{"text":"Epoch 49/50\n","name":"stdout"},"97":{"text":" - 1s - loss: 0.1333 - val_loss: 0.1505\n","name":"stdout"},"98":{"text":"Epoch 50/50\n","name":"stdout"},"99":{"text":" - 1s - loss: 0.1332 - val_loss: 0.1493\n","name":"stdout"},"100":{"data":{"image/png":"a9e9754bc090ea30cd7c57b0f89c697c1dc2b13c"}}},"exec_count":38,"start":1526752176168,"input":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\nmodel = Sequential()\nmodel.add(LSTM(50, input_shape=(train_X.shape[1], train_X.shape[2])))\nmodel.add(Dense(1))\nmodel.compile(loss='mae', optimizer='adam')\n# fit network\nhistory = model.fit(train_X, train_y, epochs=50, batch_size=72, validation_data=(test_X, test_y), verbose=2, shuffle=False)\n# plot history\npyplot.plot(history.history['loss'], label='train')\npyplot.plot(history.history['val_loss'], label='test')\npyplot.legend()\npyplot.show()","state":"done","pos":2.9375,"cell_type":"code","type":"cell","end":1526752232893,"id":"0d8de6","kernel":"python2-ubuntu"}
{"type":"file","last_load":1526749547527}
{"type":"settings","kernel":"python2-ubuntu","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.12"}},"trust":true,"kernel_usage":{"cpu":0,"memory":5296128},"kernel_state":"idle"}