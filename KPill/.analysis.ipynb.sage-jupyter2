{"type":"cell","id":"0d9153","pos":4,"input":"train_df.shape","output":{"0":{"data":{"text/plain":"(11618, 9)"},"output_type":"execute_result","exec_count":68}},"cell_type":"code","exec_count":68}
{"type":"cell","id":"0f1a81","pos":16,"input":"# # # Try Linear Regression\n# from sklearn.preprocessing import PolynomialFeatures\n# from sklearn.linear_model import LinearRegression\n# from sklearn.neural_network import MLPRegressor\n# from xgboost import XGBRegressor\n# from sklearn.ensemble import RandomForestRegressor\n# from sklearn.svm import SVR\n# from sklearn.neighbors import KNeighborsRegressor\n\n\n# # poly = PolynomialFeatures(degree=2)\n# # X_ = poly.fit_transform(X_train)\n# # X_test_ = poly.fit_transform(X_test)\n\n# clf = LinearRegression()\n# #clf = SVR(kernel='rbf')\n# #clf = MLPRegressor()\n# #clf = XGBRegressor()\n# #clf = RandomForestRegressor(random_state=42, n_estimators=50)\n# #clf = KNeighborsRegressor(n_neighbors=12)\n\n# clf.fit(X_train, y_train)\n\n# y_pred = clf.predict(X_test)","cell_type":"code","exec_count":80}
{"type":"cell","id":"198b65","pos":21,"input":"predictions = regression.predict(test_data)\n#predictions = cross_val_predict(estimator=regression, X=test_data, cv=10)\n# predictions = np.asarray(predictions)\n# np.savetxt(\"output.csv\", predictions, delimiter=\",\")","output":{"0":{"ename":"NotFittedError","evalue":"This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this method.","output_type":"error","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mNotFittedError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-87-bb23b848a081>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mregression\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m#predictions = cross_val_predict(estimator=regression, X=test_data, cv=10)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# predictions = np.asarray(predictions)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# np.savetxt(\"output.csv\", predictions, delimiter=\",\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python2.7/dist-packages/sklearn/linear_model/base.pyc\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    254\u001b[0m             \u001b[0mReturns\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m         \"\"\"\n\u001b[0;32m--> 256\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_decision_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0m_preprocess_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstaticmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_preprocess_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python2.7/dist-packages/sklearn/linear_model/base.pyc\u001b[0m in \u001b[0;36m_decision_function\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    235\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_decision_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 237\u001b[0;31m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"coef_\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    238\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'csr'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'csc'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'coo'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python2.7/dist-packages/sklearn/utils/validation.pyc\u001b[0m in \u001b[0;36mcheck_is_fitted\u001b[0;34m(estimator, attributes, msg, all_or_any)\u001b[0m\n\u001b[1;32m    766\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    767\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mall_or_any\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mattr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mattributes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 768\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mNotFittedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'name'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    769\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    770\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotFittedError\u001b[0m: This LinearRegression instance is not fitted yet. Call 'fit' with appropriate arguments before using this method."]}},"cell_type":"code","exec_count":87}
{"type":"cell","id":"22b0e5","pos":20,"input":"#clf.feature_importances_","output":{"0":{"ename":"AttributeError","evalue":"'LinearRegression' object has no attribute 'feature_importances_'","output_type":"error","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mAttributeError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-247-e4ce79c47429>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature_importances_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'LinearRegression' object has no attribute 'feature_importances_'"]}},"cell_type":"code","exec_count":247}
{"type":"cell","id":"22f05d","pos":7,"input":"# plt.rcParams[\"figure.figsize\"] = [16,9]\n# plt.boxplot(train_df['Trx'])\n# plt.show()","cell_type":"code","exec_count":71}
{"type":"cell","id":"36bc41","pos":1,"input":"# Split Test Data and Train Data\n\ntest_df = df[df['Trx'] == '????']\ntrain_df = df[df['Trx'] != '????']","cell_type":"code","exec_count":65}
{"type":"cell","id":"3ff530","pos":2,"input":"# from numpy import argmax\n# from sklearn.preprocessing import LabelEncoder\n# from sklearn.preprocessing import OneHotEncoder\n\n# # integer encode\n# label_encoder = LabelEncoder()\n# integer_encoded = label_encoder.fit_transform(train_df['Account'])\n# print(integer_encoded)\n# # binary encode\n# onehot_encoder = OneHotEncoder(sparse=True)\n# integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n# onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n# print(onehot_encoded.todense())\n# encoded_df = pd.DataFrame(onehot_encoded.todense())\n# # invert first example\n# inverted = label_encoder.inverse_transform([argmax(onehot_encoded[0, :])])\n# print(inverted)","cell_type":"code","exec_count":66}
{"type":"cell","id":"40a259","pos":5,"input":"# Drop Month Column\ntrain_df = train_df.drop(['Month'], axis=1)\n\ntest_df = test_df.drop(['Month'], axis=1)","cell_type":"code","exec_count":69}
{"type":"cell","id":"42e7f4","pos":8,"input":"#train_df['Trx'] = train_df['Trx'].apply(lambda x: np.log2(x + 1))","cell_type":"code","exec_count":72}
{"type":"cell","id":"61d190","pos":23,"input":"def chunks(l, n):\n    for i in range(0, len(l), n):\n        # Create an index range for l of n items:\n        yield l[i:i+n]\n    \npred_array = list(chunks(predictions, 6))","cell_type":"code","exec_count":226}
{"type":"cell","id":"622d9c","pos":0,"input":"# Load dataset using pandas\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"TrainTestData_Promotional Sales.csv\")\ndf = df[df['Trx'] != '10000']\n\n#df = df.drop(['Account'], axis=1)","cell_type":"code","exec_count":64}
{"type":"cell","id":"6ab068","pos":10,"input":"# int_columns = ['# Speaker Programs', '# Calls', '# PDE', '# Emails', '# Clicks', '# Samples']\n\n# train_data[int_columns] = train_data[int_columns].apply(lambda x: np.log2(x + 1))\n# test_data[int_columns] = test_data[int_columns].apply(lambda x: np.log2(x + 1))","cell_type":"code","exec_count":74}
{"type":"cell","id":"6d243e","pos":11,"input":"# import matplotlib.pyplot as plt\n\n# train_data.hist()\n# plt.show()","cell_type":"code","exec_count":75}
{"type":"cell","id":"83ef56","pos":14,"input":"# # Split train test data from train dataset\n\n# from sklearn.model_selection import train_test_split\n# X_train, X_test, y_train, y_test = train_test_split(train_data, y_train, test_size=0.20, random_state=42)","cell_type":"code","exec_count":78}
{"type":"cell","id":"8551be","pos":15,"input":"# # Apply Standard Scaling\n# from sklearn.preprocessing import StandardScaler\n# scaler = StandardScaler()\n\n# scaler.fit(X_train)\n# scaler.transform(X_train)\n# scaler.transform(X_test)","cell_type":"code","exec_count":79}
{"type":"cell","id":"8d050d","pos":19,"input":"%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = [16,9]\nplt.scatter(clf.predict(X_train), clf.predict(X_train) - y_train, c='b', s=40, alpha=0.5)\nplt.scatter(clf.predict(X_test), clf.predict(X_test) - y_test, c='g', s=40)\nplt.yticks(np.arange(-8000, 2000, 500))\nplt.hlines(y=0, xmin=0, xmax=50)\nplt.show()","output":{"0":{"data":{"image/png":"bb176f194cd24c5e919c66fe7fca16c30add91ad"},"output_type":"execute_result","exec_count":246}},"cell_type":"code","exec_count":246}
{"type":"cell","id":"8f721a","pos":13,"input":"# from sklearn.decomposition import PCA\n\n# pca = PCA(n_components=3)\n# pca.fit(train_data)\n\n# train_data = pca.fit_transform(train_data)\n# test_data = pca.fit_transform(test_data)","cell_type":"code","exec_count":77}
{"type":"cell","id":"992563","pos":3,"input":"import matplotlib.pyplot as plt\nimport pylab\n\n# int_columns = ['# Speaker Programs', '# Calls', '# PDE', '# Emails', '# Clicks', '# Samples']\n# # x = train_data['# Samples'].tolist()\n# # y = y_train.tolist()\n\n# for col in int_columns:\n#     plt.scatter(train_df[col], train_df['Trx'])\n#     plt.xlabel(col)\n#     plt.ylabel('Trx')\n#     plt.show()","cell_type":"code","exec_count":67}
{"type":"cell","id":"a54871","pos":22,"input":"# squarer = lambda t: 2 ** t\n# vfunc = np.vectorize(squarer)\n# exp_predictions = vfunc(predictions)","cell_type":"code","exec_count":138,"scrolled":true}
{"type":"cell","id":"b2c747","pos":18,"input":"from sklearn.linear_model import LinearRegression\nfrom sklearn.cross_validation import cross_val_score, cross_val_predict\nfrom sklearn.model_selection import KFold\n\nregression = LinearRegression()\n\n\ncrossvalidation = KFold(n_splits=10, shuffle=True)\nscores = cross_val_score(regression, train_data, y_train, scoring='neg_mean_squared_error', cv=10, n_jobs=1)\nprint scores","output":{"0":{"name":"stdout","output_type":"stream","text":"[-1.90096993e+25 -3.78454322e+06 -4.11707411e+24 -4.07957719e+06\n -3.61012621e+06 -3.69268396e+06 -3.85788461e+06 -3.64388974e+06\n -3.67830640e+06 -3.13392776e+26]\n"}},"cell_type":"code","exec_count":82}
{"type":"cell","id":"bf8217","pos":6,"input":"# Convert Trx to integer type\n\ntrain_df['Trx'] = train_df['Trx'].astype(int)\ntrain_df = train_df[~((train_df['Trx'] >= 7000) & (train_df['# Samples'] < 80))]\n#train_df = train_df[train_df['# Samples'] < 400]","cell_type":"code","exec_count":70}
{"type":"cell","id":"cda0da","pos":17,"input":"# from sklearn.metrics import mean_squared_error\n# import math\n\n# print math.sqrt(mean_squared_error(y_test, y_pred))","cell_type":"code","exec_count":81}
{"type":"cell","id":"d2a6d6","pos":9,"input":"# Separate Trx\ny_train = train_df['Trx']\ntrain_data = train_df.drop(['Trx'], axis=1)\n\ny_test_predict = test_df['Trx']\ntest_data = test_df.drop(['Trx'], axis=1)","cell_type":"code","exec_count":73}
{"type":"cell","id":"dc44e0","pos":24,"input":"np.savetxt(\"output.csv\", np.asarray(pred_array), delimiter=\",\", header='A,B,C,D,E,F')","cell_type":"code","exec_count":227,"scrolled":true}
{"type":"cell","id":"edc18f","pos":12,"input":"train_data = pd.get_dummies(train_data)\ntest_data = pd.get_dummies(test_data)","cell_type":"code","exec_count":76}
{"type":"file","last_load":1528204397747}
{"type":"settings","backend_state":"running","trust":true,"kernel":"python2-ubuntu","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.12"}},"kernel_usage":{"cpu":0,"memory":5316608},"kernel_state":"idle"}